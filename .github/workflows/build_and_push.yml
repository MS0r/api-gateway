# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Api Gateway CI

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  TEST_DATABASE_URL: postgresql+asyncpg://user:123@db/mydb

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build all containers
      run: docker compose -f docker-compose.api.yml build

    - name: Start dependencies
      run: docker compose -f docker-compose.api.yml up -d db sandbox

    - name: Wait for Postgres to be ready
      run: |
        until docker exec test-postgres-api pg_isready -U user -d mydb; do
          echo "Waiting for database..."
          sleep 3
        done

    - name: Run tests in api-dev
      run: |
        docker compose -f docker-compose.api.yml run --rm api-dev \
          sh -c "pytest tests/ --maxfail=1 --disable-warnings -q"

    - name: Tear down
      if: always()
      run: docker compose -f docker-compose.api.yml down -v

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/api-gateway-erlang:latest
          file: Dockerfile.server
          cache-from: type=gha
          cache-to: type=gha,mode=max