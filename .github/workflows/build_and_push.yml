# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Api Gateway CI

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  Tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container: python:3.12-slim

    services:
      db:
        image: postgres
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: 123
          POSTGRES_DB: mydb
        options: >-
          --health-cmd "pg_isready -U user -d mydb"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      sandbox:
        image: mickael279/sandbox-erlang:latest
        ports:
          - "4000:4000"
        options: >-
          --health-cmd "nc -z localhost 4000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U user; do
            echo "Waiting for Postgres..."
            sleep 2
          done
      - name: Run unit and integration Tests
        run: |
          coverage run -m pytest --maxfail=1 --disable-warnings -q
          coverage report -m
          coverage xml
        env:
          APP_ENV: test
          DATABASE_URL: postgresql+asyncpg://user:123@db/mydb
          SECRET_KEY: 123
      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: Tests
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: 
            ${{ vars.DOCKERHUB_USERNAME }}/api-gateway-erlang:latest
            ${{ vars.DOCKERHUB_USERNAME }}/api-gateway-erlang:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          file: Dockerfile.server
          cache-from: type=gha
          cache-to: type=gha,mode=max
